{"ast":null,"code":"var _jsxFileName = \"/Users/mahadrehan/Desktop/FloatPOS/float/src/components/DraggableTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Draggable from \"react-draggable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TableImg = styled.img`\n  width: 60%;\n  height: 60%;\n  pointer-events: none; /* This ensures the image doesn't interfere with dragging */\n`;\n_c = TableImg;\nexport default function DraggableTable({\n  img,\n  gridRef,\n  addElementToGrid,\n  updatePosition,\n  initialPosition = {\n    x: 0,\n    y: 0\n  },\n  isInGrid = false,\n  resetOnDrop = false\n}) {\n  _s();\n  const [dragging, setDragging] = useState(false);\n  const [position, setPosition] = useState(initialPosition);\n  const draggableRef = useRef(null);\n  const handleDragStop = (e, data) => {\n    const gridRect = gridRef.current.getBoundingClientRect();\n    const draggableRect = draggableRef.current.getBoundingClientRect();\n    if (draggableRect.left >= gridRect.left && draggableRect.right <= gridRect.right && draggableRect.top >= gridRect.top && draggableRect.bottom <= gridRect.bottom) {\n      // Element is within the grid bounds\n      const newX = draggableRect.left - gridRect.left;\n      const newY = draggableRect.top - gridRect.top;\n      if (isInGrid) {\n        setPosition({\n          x: newX,\n          y: newY\n        });\n        if (updatePosition) {\n          updatePosition({\n            x: newX,\n            y: newY\n          });\n        }\n      } else {\n        addElementToGrid( /*#__PURE__*/_jsxDEV(DraggableTable, {\n          img: img,\n          gridRef: gridRef,\n          addElementToGrid: addElementToGrid,\n          updatePosition: updatePosition,\n          initialPosition: {\n            x: newX,\n            y: newY\n          },\n          isInGrid: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), {\n          x: newX,\n          y: newY\n        });\n        if (resetOnDrop) {\n          setPosition({\n            x: 0,\n            y: 0\n          });\n        }\n      }\n    } else {\n      // Element is outside the grid bounds, reset position\n      setPosition(initialPosition);\n    }\n    setDragging(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    nodeRef: draggableRef,\n    onStart: () => setDragging(true),\n    onStop: handleDragStop,\n    position: position,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: draggableRef,\n      className: `draggable-content ${dragging ? \"dragging\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"draggable-icon\",\n        src: \"/assets/icons/draggable-icon.svg\",\n        alt: \"draggable icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableImg, {\n        src: img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(DraggableTable, \"S03z9Ym/dK8t+QhnQB9ZpTIW5pk=\");\n_c2 = DraggableTable;\nvar _c, _c2;\n$RefreshReg$(_c, \"TableImg\");\n$RefreshReg$(_c2, \"DraggableTable\");","map":{"version":3,"names":["React","useState","useRef","styled","Draggable","jsxDEV","_jsxDEV","TableImg","img","_c","DraggableTable","gridRef","addElementToGrid","updatePosition","initialPosition","x","y","isInGrid","resetOnDrop","_s","dragging","setDragging","position","setPosition","draggableRef","handleDragStop","e","data","gridRect","current","getBoundingClientRect","draggableRect","left","right","top","bottom","newX","newY","fileName","_jsxFileName","lineNumber","columnNumber","nodeRef","onStart","onStop","children","ref","className","src","alt","_c2","$RefreshReg$"],"sources":["/Users/mahadrehan/Desktop/FloatPOS/float/src/components/DraggableTable.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Draggable from \"react-draggable\";\n\nconst TableImg = styled.img`\n  width: 60%;\n  height: 60%;\n  pointer-events: none; /* This ensures the image doesn't interfere with dragging */\n`;\n\nexport default function DraggableTable({\n  img,\n  gridRef,\n  addElementToGrid,\n  updatePosition,\n  initialPosition = { x: 0, y: 0 },\n  isInGrid = false,\n  resetOnDrop = false\n}) {\n  const [dragging, setDragging] = useState(false);\n  const [position, setPosition] = useState(initialPosition);\n  const draggableRef = useRef(null);\n\n  const handleDragStop = (e, data) => {\n    const gridRect = gridRef.current.getBoundingClientRect();\n    const draggableRect = draggableRef.current.getBoundingClientRect();\n\n    if (\n      draggableRect.left >= gridRect.left &&\n      draggableRect.right <= gridRect.right &&\n      draggableRect.top >= gridRect.top &&\n      draggableRect.bottom <= gridRect.bottom\n    ) {\n      // Element is within the grid bounds\n      const newX = draggableRect.left - gridRect.left;\n      const newY = draggableRect.top - gridRect.top;\n\n      if (isInGrid) {\n        setPosition({ x: newX, y: newY });\n        if (updatePosition) {\n          updatePosition({ x: newX, y: newY });\n        }\n      } else {\n        addElementToGrid(\n          <DraggableTable\n            img={img}\n            gridRef={gridRef}\n            addElementToGrid={addElementToGrid}\n            updatePosition={updatePosition}\n            initialPosition={{ x: newX, y: newY }}\n            isInGrid={true}\n          />,\n          { x: newX, y: newY }\n        );\n        if (resetOnDrop) {\n          setPosition({ x: 0, y: 0 });\n        }\n      }\n    } else {\n      // Element is outside the grid bounds, reset position\n      setPosition(initialPosition);\n    }\n\n    setDragging(false);\n  };\n\n  return (\n    <Draggable\n      nodeRef={draggableRef}\n      onStart={() => setDragging(true)}\n      onStop={handleDragStop}\n      position={position}\n    >\n      <div ref={draggableRef} className={`draggable-content ${dragging ? \"dragging\" : \"\"}`}>\n        <img className=\"draggable-icon\" src=\"/assets/icons/draggable-icon.svg\" alt=\"draggable icon\" />\n        <TableImg src={img} />\n      </div>\n    </Draggable>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGJ,MAAM,CAACK,GAAG;AAC3B;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,QAAQ;AAMd,eAAe,SAASG,cAAcA,CAAC;EACrCF,GAAG;EACHG,OAAO;EACPC,gBAAgB;EAChBC,cAAc;EACdC,eAAe,GAAG;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EAChCC,QAAQ,GAAG,KAAK;EAChBC,WAAW,GAAG;AAChB,CAAC,EAAE;EAAAC,EAAA;EACD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAACa,eAAe,CAAC;EACzD,MAAMU,YAAY,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAEjC,MAAMuB,cAAc,GAAGA,CAACC,CAAC,EAAEC,IAAI,KAAK;IAClC,MAAMC,QAAQ,GAAGjB,OAAO,CAACkB,OAAO,CAACC,qBAAqB,CAAC,CAAC;IACxD,MAAMC,aAAa,GAAGP,YAAY,CAACK,OAAO,CAACC,qBAAqB,CAAC,CAAC;IAElE,IACEC,aAAa,CAACC,IAAI,IAAIJ,QAAQ,CAACI,IAAI,IACnCD,aAAa,CAACE,KAAK,IAAIL,QAAQ,CAACK,KAAK,IACrCF,aAAa,CAACG,GAAG,IAAIN,QAAQ,CAACM,GAAG,IACjCH,aAAa,CAACI,MAAM,IAAIP,QAAQ,CAACO,MAAM,EACvC;MACA;MACA,MAAMC,IAAI,GAAGL,aAAa,CAACC,IAAI,GAAGJ,QAAQ,CAACI,IAAI;MAC/C,MAAMK,IAAI,GAAGN,aAAa,CAACG,GAAG,GAAGN,QAAQ,CAACM,GAAG;MAE7C,IAAIjB,QAAQ,EAAE;QACZM,WAAW,CAAC;UAAER,CAAC,EAAEqB,IAAI;UAAEpB,CAAC,EAAEqB;QAAK,CAAC,CAAC;QACjC,IAAIxB,cAAc,EAAE;UAClBA,cAAc,CAAC;YAAEE,CAAC,EAAEqB,IAAI;YAAEpB,CAAC,EAAEqB;UAAK,CAAC,CAAC;QACtC;MACF,CAAC,MAAM;QACLzB,gBAAgB,eACdN,OAAA,CAACI,cAAc;UACbF,GAAG,EAAEA,GAAI;UACTG,OAAO,EAAEA,OAAQ;UACjBC,gBAAgB,EAAEA,gBAAiB;UACnCC,cAAc,EAAEA,cAAe;UAC/BC,eAAe,EAAE;YAAEC,CAAC,EAAEqB,IAAI;YAAEpB,CAAC,EAAEqB;UAAK,CAAE;UACtCpB,QAAQ,EAAE;QAAK;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC,EACF;UAAE1B,CAAC,EAAEqB,IAAI;UAAEpB,CAAC,EAAEqB;QAAK,CACrB,CAAC;QACD,IAAInB,WAAW,EAAE;UACfK,WAAW,CAAC;YAAER,CAAC,EAAE,CAAC;YAAEC,CAAC,EAAE;UAAE,CAAC,CAAC;QAC7B;MACF;IACF,CAAC,MAAM;MACL;MACAO,WAAW,CAACT,eAAe,CAAC;IAC9B;IAEAO,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEf,OAAA,CAACF,SAAS;IACRsC,OAAO,EAAElB,YAAa;IACtBmB,OAAO,EAAEA,CAAA,KAAMtB,WAAW,CAAC,IAAI,CAAE;IACjCuB,MAAM,EAAEnB,cAAe;IACvBH,QAAQ,EAAEA,QAAS;IAAAuB,QAAA,eAEnBvC,OAAA;MAAKwC,GAAG,EAAEtB,YAAa;MAACuB,SAAS,EAAE,qBAAqB3B,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAG;MAAAyB,QAAA,gBACnFvC,OAAA;QAAKyC,SAAS,EAAC,gBAAgB;QAACC,GAAG,EAAC,kCAAkC;QAACC,GAAG,EAAC;MAAgB;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9FnC,OAAA,CAACC,QAAQ;QAACyC,GAAG,EAAExC;MAAI;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB;AAACtB,EAAA,CArEuBT,cAAc;AAAAwC,GAAA,GAAdxC,cAAc;AAAA,IAAAD,EAAA,EAAAyC,GAAA;AAAAC,YAAA,CAAA1C,EAAA;AAAA0C,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
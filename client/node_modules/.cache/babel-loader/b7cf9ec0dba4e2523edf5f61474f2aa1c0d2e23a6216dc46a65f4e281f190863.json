{"ast":null,"code":"var _jsxFileName = \"/Users/mahadrehan/Desktop/FloatPOS/float/src/components/DraggableTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Draggable from \"react-draggable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TableImg = styled.img`\n  width: 60%;\n  height: 60%;\n  pointer-events: none; /* This ensures the image doesn't interfere with dragging */\n`;\n_c = TableImg;\nexport default function DraggableTable({\n  img,\n  gridRef,\n  addElementToGrid,\n  initialPosition = {\n    x: 0,\n    y: 0\n  },\n  isInGrid = false\n}) {\n  _s();\n  const [dragging, setDragging] = useState(false);\n  const [position, setPosition] = useState(initialPosition);\n  const draggableRef = useRef(null);\n  const handleDragStop = (e, data) => {\n    const gridRect = gridRef.current.getBoundingClientRect();\n    const draggableRect = draggableRef.current.getBoundingClientRect();\n    if (draggableRect.left >= gridRect.left && draggableRect.right <= gridRect.right && draggableRect.top >= gridRect.top && draggableRect.bottom <= gridRect.bottom) {\n      // Element is within the grid bounds\n      const newX = draggableRect.left - gridRect.left;\n      const newY = draggableRect.top - gridRect.top;\n      setPosition({\n        x: newX,\n        y: newY\n      });\n      if (!isInGrid) {\n        addElementToGrid( /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '10vw',\n            height: '10vw'\n          },\n          children: /*#__PURE__*/_jsxDEV(TableImg, {\n            src: img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), {\n          x: newX,\n          y: newY\n        });\n      }\n    } else {\n      // Element is outside the grid bounds, reset position\n      setPosition(initialPosition);\n    }\n    setDragging(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    nodeRef: draggableRef,\n    onStart: () => setDragging(true),\n    onStop: handleDragStop,\n    position: position,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: draggableRef,\n      className: `draggable-content ${dragging ? \"dragging\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"draggable-icon\",\n        src: \"/assets/icons/draggable-icon.svg\",\n        alt: \"draggable icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableImg, {\n        src: img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n}\n\n// Add this CSS to your stylesheet or a styled component\n_s(DraggableTable, \"S03z9Ym/dK8t+QhnQB9ZpTIW5pk=\");\n_c2 = DraggableTable;\nconst styles = `\n.table-option {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 10vw;\n  min-width: 9rem;\n  min-height: 10rem;\n  border: 1px solid #38C6F450;\n  position: relative;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.draggable-content.dragging {\n  position: absolute !important;\n  z-index: 1000;\n  transition: none;\n}\n`;\n\n// Inject the styles into the document head\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\nvar _c, _c2;\n$RefreshReg$(_c, \"TableImg\");\n$RefreshReg$(_c2, \"DraggableTable\");","map":{"version":3,"names":["React","useState","useRef","styled","Draggable","jsxDEV","_jsxDEV","TableImg","img","_c","DraggableTable","gridRef","addElementToGrid","initialPosition","x","y","isInGrid","_s","dragging","setDragging","position","setPosition","draggableRef","handleDragStop","e","data","gridRect","current","getBoundingClientRect","draggableRect","left","right","top","bottom","newX","newY","style","width","height","children","src","fileName","_jsxFileName","lineNumber","columnNumber","nodeRef","onStart","onStop","ref","className","alt","_c2","styles","styleSheet","document","createElement","type","innerText","head","appendChild","$RefreshReg$"],"sources":["/Users/mahadrehan/Desktop/FloatPOS/float/src/components/DraggableTable.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Draggable from \"react-draggable\";\n\nconst TableImg = styled.img`\n  width: 60%;\n  height: 60%;\n  pointer-events: none; /* This ensures the image doesn't interfere with dragging */\n`;\n\nexport default function DraggableTable({\n    img,\n    gridRef,\n    addElementToGrid,\n    initialPosition = { x: 0, y: 0 },\n    isInGrid = false\n  }) {\n    const [dragging, setDragging] = useState(false);\n    const [position, setPosition] = useState(initialPosition);\n    const draggableRef = useRef(null);\n  \n    const handleDragStop = (e, data) => {\n      const gridRect = gridRef.current.getBoundingClientRect();\n      const draggableRect = draggableRef.current.getBoundingClientRect();\n  \n      if (\n        draggableRect.left >= gridRect.left &&\n        draggableRect.right <= gridRect.right &&\n        draggableRect.top >= gridRect.top &&\n        draggableRect.bottom <= gridRect.bottom\n      ) {\n        // Element is within the grid bounds\n        const newX = draggableRect.left - gridRect.left;\n        const newY = draggableRect.top - gridRect.top;\n        setPosition({ x: newX, y: newY });\n        if (!isInGrid) {\n          addElementToGrid(\n            <div style={{ width: '10vw', height: '10vw' }}>\n              <TableImg src={img} />\n            </div>,\n            { x: newX, y: newY }\n          );\n        }\n      } else {\n        // Element is outside the grid bounds, reset position\n        setPosition(initialPosition);\n      }\n  \n      setDragging(false);\n    };\n  return (\n      <Draggable\n        nodeRef={draggableRef}\n        onStart={() => setDragging(true)}\n        onStop={handleDragStop}\n        position={position}\n      >\n        <div ref={draggableRef} className={`draggable-content ${dragging ? \"dragging\" : \"\"}`}>\n          <img className=\"draggable-icon\" src=\"/assets/icons/draggable-icon.svg\" alt=\"draggable icon\" />\n          <TableImg src={img} />\n        </div>\n      </Draggable>\n  );\n}\n\n// Add this CSS to your stylesheet or a styled component\nconst styles = `\n.table-option {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 10vw;\n  min-width: 9rem;\n  min-height: 10rem;\n  border: 1px solid #38C6F450;\n  position: relative;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.draggable-content.dragging {\n  position: absolute !important;\n  z-index: 1000;\n  transition: none;\n}\n`;\n\n// Inject the styles into the document head\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}